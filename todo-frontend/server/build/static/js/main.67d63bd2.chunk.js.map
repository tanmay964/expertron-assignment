{"version":3,"sources":["APIHelper.js","Task.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","task","a","axios","post","newTodo","data","id","delete","message","payload","put","get","todos","createTodo","deleteTodo","updateTodo","getAllTodos","Task","useState","setTodos","todo","setTodo","useEffect","APIHelper","fetchTodoAndSetTodos","e","preventDefault","alert","some","console","log","stopPropagation","filter","i","_id","completed","find","updatedTodo","map","className","type","value","onChange","target","placeholder","onClick","length","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.67d63bd2.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst API_URL=\"http://localhost:3000/todos/\"\nasync function createTodo(task) {\n  const { data: newTodo } = await axios.post(API_URL, {\n    task\n  });\n  return newTodo;\n}\n\nasync function deleteTodo(id) {\n  const message = await axios.delete(`${API_URL}${id}`);\n  return message;\n}\n\nasync function updateTodo(id, payload) {\n  const {data:newTodo} = await axios.put(`${API_URL}${id}`, payload);\n  return newTodo;\n}\n\nasync function getAllTodos() {\n  const { data: todos } = await axios.get(API_URL);\n  return todos;\n}\n\nexport default { createTodo, deleteTodo, updateTodo, getAllTodos };\n","import React, { useEffect, useState } from 'react'\r\nimport APIHelper from './APIHelper';\r\n\r\nfunction Task() {\r\n    const [todos, setTodos] = useState([])\r\n  const [todo, setTodo] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchTodoAndSetTodos = async () => {\r\n      const todos = await APIHelper.getAllTodos();\r\n      setTodos(todos);\r\n    };\r\n    fetchTodoAndSetTodos();\r\n  }, []);\r\n\r\n  const createTodo = async e => {\r\n    e.preventDefault();\r\n    if (!todo) {\r\n      alert(\"please enter something\");\r\n      return;\r\n    }\r\n    if (todos.some(({ task }) => task === todo)) {\r\n      alert(`Task: ${todo} already exists`);\r\n      return;\r\n    }\r\n    const newTodo = await APIHelper.createTodo(todo);\r\n    console.log(newTodo);\r\n    setTodos([...todos, newTodo]);\r\n  };\r\n\r\n  const deleteTodo = async (e, id) => {\r\n    try {\r\n      e.stopPropagation();\r\n      await APIHelper.deleteTodo(id);\r\n      setTodos(todos.filter(({ _id: i }) => id !== i));\r\n    } catch (err) {}\r\n  };\r\n\r\n  const updateTodo = async (e, id) => {\r\n    e.stopPropagation();\r\n    const payload = {completed: !todos.find(todo => todo._id === id).completed}\r\n    const updatedTodo  = await APIHelper.updateTodo(id, payload);\r\n    setTodos(todos.map((todo)=> todo._id === id ? updatedTodo: todo));\r\n    \r\n  };\r\n    return (\r\n        <div className = \"task\">\r\n            <div className = \"task-search\">\r\n            <input className = \"task-searchInput\"\r\n          type=\"text\"\r\n          value={todo}\r\n          onChange={({ target }) => setTodo(target.value)}\r\n          placeholder=\"Enter a task\"\r\n        />\r\n        <button className = \"task-button\" type=\"button\" onClick={createTodo}>\r\n          Add Your Task\r\n        </button>\r\n      </div>\r\n\r\n      <ol className = \"task-list\">\r\n        {todos.length ? todos.map(({ _id, task, completed }, i) => (\r\n          <li\r\n            key={i}\r\n            onClick={e => updateTodo(e, _id)}\r\n            className={completed ? \"completed\" : \"\"}\r\n          >\r\n            {task} <span className=\"task-span\" onClick={e => deleteTodo(e, _id)}>x</span>\r\n          </li>\r\n        )): <p>No Tasks Yet:(</p>}\r\n      </ol>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Task\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport APIHelper from \"./APIHelper.js\";\nimport Header from \"./Header\";\nimport Task from \"./Task\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [todo, setTodo] = useState(\"\");\n\n  useEffect(() => {\n    const fetchTodoAndSetTodos = async () => {\n      const todos = await APIHelper.getAllTodos();\n      setTodos(todos);\n    };\n    fetchTodoAndSetTodos();\n  }, []);\n\n  const createTodo = async e => {\n    e.preventDefault();\n    if (!todo) {\n      alert(\"please enter something\");\n      return;\n    }\n    if (todos.some(({ task }) => task === todo)) {\n      alert(`Task: ${todo} already exists`);\n      return;\n    }\n    const newTodo = await APIHelper.createTodo(todo);\n    console.log(newTodo);\n    setTodos([...todos, newTodo]);\n  };\n\n  const deleteTodo = async (e, id) => {\n    try {\n      e.stopPropagation();\n      await APIHelper.deleteTodo(id);\n      setTodos(todos.filter(({ _id: i }) => id !== i));\n    } catch (err) {}\n  };\n\n  const updateTodo = async (e, id) => {\n    e.stopPropagation();\n    const payload = {completed: !todos.find(todo => todo._id === id).completed}\n    const updatedTodo  = await APIHelper.updateTodo(id, payload);\n    setTodos(todos.map((todo)=> todo._id === id ? updatedTodo: todo));\n    \n  };\n\n  return (\n    <div className=\"App\">\n      <Task/>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}